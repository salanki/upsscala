// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.ups.ship
   
import concurrent.Future
import play.api.libs.concurrent.Execution.Implicits._

/**
usage:
val obj = scalaxb.fromXML[com.ups.ship.Foo](node)
val document = scalaxb.toXML[com.ups.ship.Foo](obj, "foo", com.ups.ship.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(Some("common") -> "http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0",
    Some("error") -> "http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1",
    Some("ifs") -> "http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0",
    Some("ship") -> "http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0",
    Some("upss") -> "http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val ShipInternationalFormTypeFormat: scalaxb.XMLFormat[com.ups.ship.InternationalFormType] = new DefaultShipInternationalFormTypeFormat {}
  implicit lazy val ShipInternationalFormTypeSequence1Format: scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence1] = new DefaultShipInternationalFormTypeSequence1Format {}
  implicit lazy val ShipInternationalFormTypeSequence2Format: scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence2] = new DefaultShipInternationalFormTypeSequence2Format {}
  implicit lazy val ShipInternationalFormTypeSequence3Format: scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence3] = new DefaultShipInternationalFormTypeSequence3Format {}
  implicit lazy val ShipInternationalFormTypeSequence4Format: scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence4] = new DefaultShipInternationalFormTypeSequence4Format {}
  implicit lazy val ShipUserCreatedFormTypeFormat: scalaxb.XMLFormat[com.ups.ship.UserCreatedFormType] = new DefaultShipUserCreatedFormTypeFormat {}
  implicit lazy val ShipContactTypeFormat: scalaxb.XMLFormat[com.ups.ship.ContactType] = new DefaultShipContactTypeFormat {}
  implicit lazy val ShipForwardAgentTypeFormat: scalaxb.XMLFormat[com.ups.ship.ForwardAgentType] = new DefaultShipForwardAgentTypeFormat {}
  implicit lazy val ShipAddressTypeFormat: scalaxb.XMLFormat[com.ups.ship.AddressType] = new DefaultShipAddressTypeFormat {}
  implicit lazy val ShipUltimateConsigneeTypeFormat: scalaxb.XMLFormat[com.ups.ship.UltimateConsigneeType] = new DefaultShipUltimateConsigneeTypeFormat {}
  implicit lazy val ShipIntermediateConsigneeTypeFormat: scalaxb.XMLFormat[com.ups.ship.IntermediateConsigneeType] = new DefaultShipIntermediateConsigneeTypeFormat {}
  implicit lazy val ShipProducerTypeFormat: scalaxb.XMLFormat[com.ups.ship.ProducerType] = new DefaultShipProducerTypeFormat {}
  implicit lazy val ShipProductTypeFormat: scalaxb.XMLFormat[com.ups.ship.ProductType] = new DefaultShipProductTypeFormat {}
  implicit lazy val ShipExcludeFromFormTypeFormat: scalaxb.XMLFormat[com.ups.ship.ExcludeFromFormType] = new DefaultShipExcludeFromFormTypeFormat {}
  implicit lazy val ShipUnitTypeFormat: scalaxb.XMLFormat[com.ups.ship.UnitType] = new DefaultShipUnitTypeFormat {}
  implicit lazy val ShipPackingListInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackingListInfoType] = new DefaultShipPackingListInfoTypeFormat {}
  implicit lazy val ShipPackageAssociatedTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackageAssociatedType] = new DefaultShipPackageAssociatedTypeFormat {}
  implicit lazy val ShipUnitOfMeasurementTypeFormat: scalaxb.XMLFormat[com.ups.ship.UnitOfMeasurementType] = new DefaultShipUnitOfMeasurementTypeFormat {}
  implicit lazy val ShipNetCostDateTypeFormat: scalaxb.XMLFormat[com.ups.ship.NetCostDateType] = new DefaultShipNetCostDateTypeFormat {}
  implicit lazy val ShipProductWeightTypeFormat: scalaxb.XMLFormat[com.ups.ship.ProductWeightType] = new DefaultShipProductWeightTypeFormat {}
  implicit lazy val ShipScheduleBTypeFormat: scalaxb.XMLFormat[com.ups.ship.ScheduleBType] = new DefaultShipScheduleBTypeFormat {}
  implicit lazy val ShipIFChargesTypeFormat: scalaxb.XMLFormat[com.ups.ship.IFChargesType] = new DefaultShipIFChargesTypeFormat {}
  implicit lazy val ShipOtherChargesTypeFormat: scalaxb.XMLFormat[com.ups.ship.OtherChargesType] = new DefaultShipOtherChargesTypeFormat {}
  implicit lazy val ShipBlanketPeriodTypeFormat: scalaxb.XMLFormat[com.ups.ship.BlanketPeriodType] = new DefaultShipBlanketPeriodTypeFormat {}
  implicit lazy val ShipLicenseTypeFormat: scalaxb.XMLFormat[com.ups.ship.LicenseType] = new DefaultShipLicenseTypeFormat {}
  implicit lazy val ShipSoldToTypeFormat: scalaxb.XMLFormat[com.ups.ship.SoldToType] = new DefaultShipSoldToTypeFormat {}
  implicit lazy val ShipPhoneTypeFormat: scalaxb.XMLFormat[com.ups.ship.PhoneType] = new DefaultShipPhoneTypeFormat {}
  implicit lazy val ShipPropertyFormat: scalaxb.XMLFormat[com.ups.ship.Property] = new DefaultShipPropertyFormat {}
  implicit lazy val ShipClientInformationTypeFormat: scalaxb.XMLFormat[com.ups.ship.ClientInformationType] = new DefaultShipClientInformationTypeFormat {}
  implicit lazy val ShipRequestTypeFormat: scalaxb.XMLFormat[com.ups.ship.RequestType] = new DefaultShipRequestTypeFormat {}
  implicit lazy val ShipTransactionReferenceTypeFormat: scalaxb.XMLFormat[com.ups.ship.TransactionReferenceType] = new DefaultShipTransactionReferenceTypeFormat {}
  implicit lazy val ShipResponseTypeFormat: scalaxb.XMLFormat[com.ups.ship.ResponseType] = new DefaultShipResponseTypeFormat {}
  implicit lazy val ShipCodeDescriptionTypeFormat: scalaxb.XMLFormat[com.ups.ship.CodeDescriptionType] = new DefaultShipCodeDescriptionTypeFormat {}
  implicit lazy val ShipShipmentRequestFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentRequest] = new DefaultShipShipmentRequestFormat {}
  implicit lazy val ShipShipConfirmRequestFormat: scalaxb.XMLFormat[com.ups.ship.ShipConfirmRequest] = new DefaultShipShipConfirmRequestFormat {}
  implicit lazy val ShipShipAcceptRequestFormat: scalaxb.XMLFormat[com.ups.ship.ShipAcceptRequest] = new DefaultShipShipAcceptRequestFormat {}
  implicit lazy val ShipShipmentResponseFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentResponse] = new DefaultShipShipmentResponseFormat {}
  implicit lazy val ShipShipConfirmResponseFormat: scalaxb.XMLFormat[com.ups.ship.ShipConfirmResponse] = new DefaultShipShipConfirmResponseFormat {}
  implicit lazy val ShipShipAcceptResponseFormat: scalaxb.XMLFormat[com.ups.ship.ShipAcceptResponse] = new DefaultShipShipAcceptResponseFormat {}
  implicit lazy val ShipShipmentServiceOptionsFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentServiceOptions] = new DefaultShipShipmentServiceOptionsFormat {}
  implicit lazy val ShipShipmentTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentType] = new DefaultShipShipmentTypeFormat {}
  implicit lazy val ShipReturnServiceTypeFormat: scalaxb.XMLFormat[com.ups.ship.ReturnServiceType] = new DefaultShipReturnServiceTypeFormat {}
  implicit lazy val ShipShipperTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipperType] = new DefaultShipShipperTypeFormat {}
  implicit lazy val ShipCompanyInfoTypableFormat: scalaxb.XMLFormat[com.ups.ship.CompanyInfoTypable] = new DefaultShipCompanyInfoTypableFormat {}
  implicit lazy val ShipCompanyInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.CompanyInfoType] = new DefaultShipCompanyInfoTypeFormat {}
  implicit lazy val ShipShipPhoneTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipPhoneType] = new DefaultShipShipPhoneTypeFormat {}
  implicit lazy val ShipShipAddressTypableFormat: scalaxb.XMLFormat[com.ups.ship.ShipAddressTypable] = new DefaultShipShipAddressTypableFormat {}
  implicit lazy val ShipShipAddressTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipAddressType] = new DefaultShipShipAddressTypeFormat {}
  implicit lazy val ShipShipToTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipToType] = new DefaultShipShipToTypeFormat {}
  implicit lazy val ShipShipToAddressTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipToAddressType] = new DefaultShipShipToAddressTypeFormat {}
  implicit lazy val ShipShipFromTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipFromType] = new DefaultShipShipFromTypeFormat {}
  implicit lazy val ShipPrepaidTypeFormat: scalaxb.XMLFormat[com.ups.ship.PrepaidType] = new DefaultShipPrepaidTypeFormat {}
  implicit lazy val ShipBillShipperTypeFormat: scalaxb.XMLFormat[com.ups.ship.BillShipperType] = new DefaultShipBillShipperTypeFormat {}
  implicit lazy val ShipCreditCardTypeFormat: scalaxb.XMLFormat[com.ups.ship.CreditCardType] = new DefaultShipCreditCardTypeFormat {}
  implicit lazy val ShipCreditCardAddressTypeFormat: scalaxb.XMLFormat[com.ups.ship.CreditCardAddressType] = new DefaultShipCreditCardAddressTypeFormat {}
  implicit lazy val ShipBillThirdPartyChargeTypeFormat: scalaxb.XMLFormat[com.ups.ship.BillThirdPartyChargeType] = new DefaultShipBillThirdPartyChargeTypeFormat {}
  implicit lazy val ShipAccountAddressTypeFormat: scalaxb.XMLFormat[com.ups.ship.AccountAddressType] = new DefaultShipAccountAddressTypeFormat {}
  implicit lazy val ShipFreightCollectTypeFormat: scalaxb.XMLFormat[com.ups.ship.FreightCollectType] = new DefaultShipFreightCollectTypeFormat {}
  implicit lazy val ShipBillReceiverTypeFormat: scalaxb.XMLFormat[com.ups.ship.BillReceiverType] = new DefaultShipBillReceiverTypeFormat {}
  implicit lazy val ShipBillReceiverAddressTypeFormat: scalaxb.XMLFormat[com.ups.ship.BillReceiverAddressType] = new DefaultShipBillReceiverAddressTypeFormat {}
  implicit lazy val ShipPaymentInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.PaymentInfoType] = new DefaultShipPaymentInfoTypeFormat {}
  implicit lazy val ShipShipmentChargeTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentChargeType] = new DefaultShipShipmentChargeTypeFormat {}
  implicit lazy val ShipFRSPaymentInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.FRSPaymentInfoType] = new DefaultShipFRSPaymentInfoTypeFormat {}
  implicit lazy val ShipPaymentTypeFormat: scalaxb.XMLFormat[com.ups.ship.PaymentType] = new DefaultShipPaymentTypeFormat {}
  implicit lazy val ShipRateInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.RateInfoType] = new DefaultShipRateInfoTypeFormat {}
  implicit lazy val ShipReferenceNumberTypeFormat: scalaxb.XMLFormat[com.ups.ship.ReferenceNumberType] = new DefaultShipReferenceNumberTypeFormat {}
  implicit lazy val ShipServiceTypeFormat: scalaxb.XMLFormat[com.ups.ship.ServiceType] = new DefaultShipServiceTypeFormat {}
  implicit lazy val ShipCurrencyMonetaryTypeFormat: scalaxb.XMLFormat[com.ups.ship.CurrencyMonetaryType] = new DefaultShipCurrencyMonetaryTypeFormat {}
  implicit lazy val ShipShipmentServiceOptionsTypableFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentServiceOptionsTypable] = new DefaultShipShipmentServiceOptionsTypableFormat {}
  implicit lazy val ShipShipmentServiceOptionsTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentServiceOptionsType] = new DefaultShipShipmentServiceOptionsTypeFormat {}
  implicit lazy val ShipPreAlertNotificationTypeFormat: scalaxb.XMLFormat[com.ups.ship.PreAlertNotificationType] = new DefaultShipPreAlertNotificationTypeFormat {}
  implicit lazy val ShipPreAlertEMailMessageTypeFormat: scalaxb.XMLFormat[com.ups.ship.PreAlertEMailMessageType] = new DefaultShipPreAlertEMailMessageTypeFormat {}
  implicit lazy val ShipLocaleTypeFormat: scalaxb.XMLFormat[com.ups.ship.LocaleType] = new DefaultShipLocaleTypeFormat {}
  implicit lazy val ShipPreAlertVoiceMessageTypeFormat: scalaxb.XMLFormat[com.ups.ship.PreAlertVoiceMessageType] = new DefaultShipPreAlertVoiceMessageTypeFormat {}
  implicit lazy val ShipPreAlertTextMessageTypeFormat: scalaxb.XMLFormat[com.ups.ship.PreAlertTextMessageType] = new DefaultShipPreAlertTextMessageTypeFormat {}
  implicit lazy val ShipContactInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.ContactInfoType] = new DefaultShipContactInfoTypeFormat {}
  implicit lazy val ShipCODTypeFormat: scalaxb.XMLFormat[com.ups.ship.CODType] = new DefaultShipCODTypeFormat {}
  implicit lazy val ShipNotificationTypeFormat: scalaxb.XMLFormat[com.ups.ship.NotificationType] = new DefaultShipNotificationTypeFormat {}
  implicit lazy val ShipLabelDeliveryTypeFormat: scalaxb.XMLFormat[com.ups.ship.LabelDeliveryType] = new DefaultShipLabelDeliveryTypeFormat {}
  implicit lazy val ShipEmailDetailsTypeFormat: scalaxb.XMLFormat[com.ups.ship.EmailDetailsType] = new DefaultShipEmailDetailsTypeFormat {}
  implicit lazy val ShipPackageTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackageType] = new DefaultShipPackageTypeFormat {}
  implicit lazy val ShipPackagingTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackagingType] = new DefaultShipPackagingTypeFormat {}
  implicit lazy val ShipDimensionsTypeFormat: scalaxb.XMLFormat[com.ups.ship.DimensionsType] = new DefaultShipDimensionsTypeFormat {}
  implicit lazy val ShipShipUnitOfMeasurementTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipUnitOfMeasurementType] = new DefaultShipShipUnitOfMeasurementTypeFormat {}
  implicit lazy val ShipPackageWeightTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackageWeightType] = new DefaultShipPackageWeightTypeFormat {}
  implicit lazy val ShipPackageServiceOptionsTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackageServiceOptionsType] = new DefaultShipPackageServiceOptionsTypeFormat {}
  implicit lazy val ShipPackageDeclaredValueTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackageDeclaredValueType] = new DefaultShipPackageDeclaredValueTypeFormat {}
  implicit lazy val ShipDeclaredValueTypeFormat: scalaxb.XMLFormat[com.ups.ship.DeclaredValueType] = new DefaultShipDeclaredValueTypeFormat {}
  implicit lazy val ShipDeliveryConfirmationTypeFormat: scalaxb.XMLFormat[com.ups.ship.DeliveryConfirmationType] = new DefaultShipDeliveryConfirmationTypeFormat {}
  implicit lazy val ShipLabelMethodTypeFormat: scalaxb.XMLFormat[com.ups.ship.LabelMethodType] = new DefaultShipLabelMethodTypeFormat {}
  implicit lazy val ShipVerbalConfirmationTypeFormat: scalaxb.XMLFormat[com.ups.ship.VerbalConfirmationType] = new DefaultShipVerbalConfirmationTypeFormat {}
  implicit lazy val ShipPSOCODTypeFormat: scalaxb.XMLFormat[com.ups.ship.PSOCODType] = new DefaultShipPSOCODTypeFormat {}
  implicit lazy val ShipPSONotificationTypeFormat: scalaxb.XMLFormat[com.ups.ship.PSONotificationType] = new DefaultShipPSONotificationTypeFormat {}
  implicit lazy val ShipLabelSpecificationTypeFormat: scalaxb.XMLFormat[com.ups.ship.LabelSpecificationType] = new DefaultShipLabelSpecificationTypeFormat {}
  implicit lazy val ShipInstructionCodeDescriptionTypeFormat: scalaxb.XMLFormat[com.ups.ship.InstructionCodeDescriptionType] = new DefaultShipInstructionCodeDescriptionTypeFormat {}
  implicit lazy val ShipLabelImageFormatTypeFormat: scalaxb.XMLFormat[com.ups.ship.LabelImageFormatType] = new DefaultShipLabelImageFormatTypeFormat {}
  implicit lazy val ShipLabelStockSizeTypeFormat: scalaxb.XMLFormat[com.ups.ship.LabelStockSizeType] = new DefaultShipLabelStockSizeTypeFormat {}
  implicit lazy val ShipCommodityTypeFormat: scalaxb.XMLFormat[com.ups.ship.CommodityType] = new DefaultShipCommodityTypeFormat {}
  implicit lazy val ShipNMFCTypeFormat: scalaxb.XMLFormat[com.ups.ship.NMFCType] = new DefaultShipNMFCTypeFormat {}
  implicit lazy val ShipShipmentResultsTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentResultsType] = new DefaultShipShipmentResultsTypeFormat {}
  implicit lazy val ShipShipmentChargesTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipmentChargesType] = new DefaultShipShipmentChargesTypeFormat {}
  implicit lazy val ShipNegotiatedRateChargesTypeFormat: scalaxb.XMLFormat[com.ups.ship.NegotiatedRateChargesType] = new DefaultShipNegotiatedRateChargesTypeFormat {}
  implicit lazy val ShipShipChargeTypeFormat: scalaxb.XMLFormat[com.ups.ship.ShipChargeType] = new DefaultShipShipChargeTypeFormat {}
  implicit lazy val ShipFRSShipmentDataTypeFormat: scalaxb.XMLFormat[com.ups.ship.FRSShipmentDataType] = new DefaultShipFRSShipmentDataTypeFormat {}
  implicit lazy val ShipTransportationChargeTypeFormat: scalaxb.XMLFormat[com.ups.ship.TransportationChargeType] = new DefaultShipTransportationChargeTypeFormat {}
  implicit lazy val ShipBillingWeightTypeFormat: scalaxb.XMLFormat[com.ups.ship.BillingWeightType] = new DefaultShipBillingWeightTypeFormat {}
  implicit lazy val ShipBillingUnitOfMeasurementTypeFormat: scalaxb.XMLFormat[com.ups.ship.BillingUnitOfMeasurementType] = new DefaultShipBillingUnitOfMeasurementTypeFormat {}
  implicit lazy val ShipPackageResultsTypeFormat: scalaxb.XMLFormat[com.ups.ship.PackageResultsType] = new DefaultShipPackageResultsTypeFormat {}
  implicit lazy val ShipLabelTypeFormat: scalaxb.XMLFormat[com.ups.ship.LabelType] = new DefaultShipLabelTypeFormat {}
  implicit lazy val ShipReceiptTypeFormat: scalaxb.XMLFormat[com.ups.ship.ReceiptType] = new DefaultShipReceiptTypeFormat {}
  implicit lazy val ShipImageTypableFormat: scalaxb.XMLFormat[com.ups.ship.ImageTypable] = new DefaultShipImageTypableFormat {}
  implicit lazy val ShipImageTypeFormat: scalaxb.XMLFormat[com.ups.ship.ImageType] = new DefaultShipImageTypeFormat {}
  implicit lazy val ShipFormTypeFormat: scalaxb.XMLFormat[com.ups.ship.FormType] = new DefaultShipFormTypeFormat {}
  implicit lazy val ShipFormImageTypeFormat: scalaxb.XMLFormat[com.ups.ship.FormImageType] = new DefaultShipFormImageTypeFormat {}
  implicit lazy val ShipImageFormatTypeFormat: scalaxb.XMLFormat[com.ups.ship.ImageFormatType] = new DefaultShipImageFormatTypeFormat {}
  implicit lazy val ShipSCReportTypeFormat: scalaxb.XMLFormat[com.ups.ship.SCReportType] = new DefaultShipSCReportTypeFormat {}
  implicit lazy val ShipHighValueReportTypeFormat: scalaxb.XMLFormat[com.ups.ship.HighValueReportType] = new DefaultShipHighValueReportTypeFormat {}
  implicit lazy val ShipDryIceTypeFormat: scalaxb.XMLFormat[com.ups.ship.DryIceType] = new DefaultShipDryIceTypeFormat {}
  implicit lazy val ShipDryIceWeightTypeFormat: scalaxb.XMLFormat[com.ups.ship.DryIceWeightType] = new DefaultShipDryIceWeightTypeFormat {}
  implicit lazy val ShipReceiptSpecificationTypeFormat: scalaxb.XMLFormat[com.ups.ship.ReceiptSpecificationType] = new DefaultShipReceiptSpecificationTypeFormat {}
  implicit lazy val ShipReceiptImageFormatTypeFormat: scalaxb.XMLFormat[com.ups.ship.ReceiptImageFormatType] = new DefaultShipReceiptImageFormatTypeFormat {}
  implicit lazy val ShipErrorsFormat: scalaxb.XMLFormat[com.ups.ship.Errors] = new DefaultShipErrorsFormat {}
  implicit lazy val ShipErrorDetailTypeFormat: scalaxb.XMLFormat[com.ups.ship.ErrorDetailType] = new DefaultShipErrorDetailTypeFormat {}
  implicit lazy val ShipCodeTypeFormat: scalaxb.XMLFormat[com.ups.ship.CodeType] = new DefaultShipCodeTypeFormat {}
  implicit lazy val ShipAdditionalInfoTypeFormat: scalaxb.XMLFormat[com.ups.ship.AdditionalInfoType] = new DefaultShipAdditionalInfoTypeFormat {}
  implicit lazy val ShipAdditionalCodeDescTypeFormat: scalaxb.XMLFormat[com.ups.ship.AdditionalCodeDescType] = new DefaultShipAdditionalCodeDescTypeFormat {}
  implicit lazy val ShipLocationTypeFormat: scalaxb.XMLFormat[com.ups.ship.LocationType] = new DefaultShipLocationTypeFormat {}
  implicit lazy val ShipUsernameTokenFormat: scalaxb.XMLFormat[com.ups.ship.UsernameToken] = new DefaultShipUsernameTokenFormat {}
  implicit lazy val ShipServiceAccessTokenFormat: scalaxb.XMLFormat[com.ups.ship.ServiceAccessToken] = new DefaultShipServiceAccessTokenFormat {}
  implicit lazy val ShipUPSSecurityFormat: scalaxb.XMLFormat[com.ups.ship.UPSSecurity] = new DefaultShipUPSSecurityFormat {}


  trait ShipBindings { this: scalaxb.Soap11PlayClients =>
    lazy val targetNamespace: Option[String] = Some("http://www.ups.com/WSDL/XOLTWS/Ship/v1.0")
    lazy val service: com.ups.ship.ShipPortType = new ShipBinding {}
   
    val current = play.api.Play.current
    private val address =  current.configuration.getBoolean("ups.testing").getOrElse(true) match {
      case true => "https://wwwcie.ups.com/webservices/Ship"
      case false => "https://onlinetools.ups.com/webservices/Ship"
    }

    def baseAddress = new java.net.URI(address) 

    trait ShipBinding extends com.ups.ship.ShipPortType {
      def processShipment(value: com.ups.ship.ShipmentRequest, upsSecurity: com.ups.ship.UPSSecurity): Future[Either[scalaxb.Soap11Fault[com.ups.ship.Errors], com.ups.ship.ShipmentResponse]] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentRequest", defaultScope),
            scalaxb.toXML(upsSecurity, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "UPSSecurity", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("http://onlinetools.ups.com/webservices/ShipBinding/v1.0"))).map(_ match {
          case Left(x)  => Left(x.asFault[com.ups.ship.Errors])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[com.ups.ship.ShipmentResponse](body.headOption getOrElse {body}))
        })
      def processShipConfirm(value: com.ups.ship.ShipConfirmRequest, upsSecurity: com.ups.ship.UPSSecurity): Future[Either[scalaxb.Soap11Fault[com.ups.ship.Errors], com.ups.ship.ShipConfirmResponse]] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipConfirmRequest", defaultScope),
            scalaxb.toXML(upsSecurity, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "UPSSecurity", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("http://onlinetools.ups.com/webservices/ShipBinding/v1.0"))).map(_  match {
          case Left(x)  => Left(x.asFault[com.ups.ship.Errors])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[com.ups.ship.ShipConfirmResponse](body.headOption getOrElse {body}))
        })
      def processShipAccept(value: com.ups.ship.ShipAcceptRequest, upsSecurity: com.ups.ship.UPSSecurity): Future[Either[scalaxb.Soap11Fault[com.ups.ship.Errors], com.ups.ship.ShipAcceptResponse]] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipAcceptRequest", defaultScope),
            scalaxb.toXML(upsSecurity, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "UPSSecurity", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("http://onlinetools.ups.com/webservices/ShipBinding/v1.0"))).map(_  match {
          case Left(x)  => Left(x.asFault[com.ups.ship.Errors])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[com.ups.ship.ShipAcceptResponse](body.headOption getOrElse {body}))
        })
    }
  }


  trait DefaultShipInternationalFormTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.InternationalFormType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("InternationalFormType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.InternationalFormType] =
      phrase(((rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "FormType")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "UserCreatedForm")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "AdditionalDocumentIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "FormGroupIdName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "SEDFilingOption")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Contacts")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Product")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "InvoiceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "InvoiceDate")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PurchaseOrderNumber"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => com.ups.ship.InternationalFormTypeSequence1(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.UserCreatedFormType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.ups.ship.ContactType](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.ups.ship.ProductType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "TermsOfShipment")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ReasonForExport")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Comments")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "DeclarationStatement")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Discount")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "FreightCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "InsuranceCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "OtherCharges")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CurrencyCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "BlanketPeriod"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => com.ups.ship.InternationalFormTypeSequence2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.ups.ship.IFChargesType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.ups.ship.IFChargesType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.ups.ship.IFChargesType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.ups.ship.OtherChargesType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[com.ups.ship.BlanketPeriodType](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ExportDate")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ExportingCarrier")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CarrierID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "InBondCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "EntryNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PointOfOrigin")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ModeOfTransport")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PortOfExport")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PortOfUnloading")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "LoadingPier"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => com.ups.ship.InternationalFormTypeSequence3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PartiesToTransaction")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "RoutedExportTransactionIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ContainerizedIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "License")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ECCNNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "OverridePaperlessIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ShipperMemo")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "MultiCurrencyInvoiceLineTotal"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 => com.ups.ship.InternationalFormTypeSequence4(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.LicenseType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.InternationalFormType(p1,
        p2,
        p3,
        p4) })
    
    def writesChildNodes(__obj: com.ups.ship.InternationalFormType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.InternationalFormTypeSequence1](__obj.internationalformtypesequence1, None, Some("internationalformtypesequence1"), __scope, false),
        scalaxb.toXML[com.ups.ship.InternationalFormTypeSequence2](__obj.internationalformtypesequence2, None, Some("internationalformtypesequence2"), __scope, false),
        scalaxb.toXML[com.ups.ship.InternationalFormTypeSequence3](__obj.internationalformtypesequence3, None, Some("internationalformtypesequence3"), __scope, false),
        scalaxb.toXML[com.ups.ship.InternationalFormTypeSequence4](__obj.internationalformtypesequence4, None, Some("internationalformtypesequence4"), __scope, false))

  }

  trait DefaultShipInternationalFormTypeSequence1Format extends scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.InternationalFormTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: com.ups.ship.InternationalFormTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.FormType flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("FormType"), __scope, false) },
        __obj.UserCreatedForm map { scalaxb.toXML[com.ups.ship.UserCreatedFormType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("UserCreatedForm"), __scope, false) } getOrElse {Nil},
        __obj.AdditionalDocumentIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("AdditionalDocumentIndicator"), __scope, false) } getOrElse {Nil},
        __obj.FormGroupIdName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("FormGroupIdName"), __scope, false) } getOrElse {Nil},
        __obj.SEDFilingOption map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("SEDFilingOption"), __scope, false) } getOrElse {Nil},
        __obj.Contacts map { scalaxb.toXML[com.ups.ship.ContactType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Contacts"), __scope, false) } getOrElse {Nil},
        __obj.Product flatMap { scalaxb.toXML[com.ups.ship.ProductType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Product"), __scope, false) },
        __obj.InvoiceNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("InvoiceNumber"), __scope, false) } getOrElse {Nil},
        __obj.InvoiceDate map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("InvoiceDate"), __scope, false) } getOrElse {Nil},
        __obj.PurchaseOrderNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PurchaseOrderNumber"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultShipInternationalFormTypeSequence2Format extends scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.InternationalFormTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: com.ups.ship.InternationalFormTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.TermsOfShipment map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("TermsOfShipment"), __scope, false) } getOrElse {Nil},
        __obj.ReasonForExport map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ReasonForExport"), __scope, false) } getOrElse {Nil},
        __obj.Comments map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Comments"), __scope, false) } getOrElse {Nil},
        __obj.DeclarationStatement map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("DeclarationStatement"), __scope, false) } getOrElse {Nil},
        __obj.Discount map { scalaxb.toXML[com.ups.ship.IFChargesType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Discount"), __scope, false) } getOrElse {Nil},
        __obj.FreightCharges map { scalaxb.toXML[com.ups.ship.IFChargesType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("FreightCharges"), __scope, false) } getOrElse {Nil},
        __obj.InsuranceCharges map { scalaxb.toXML[com.ups.ship.IFChargesType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("InsuranceCharges"), __scope, false) } getOrElse {Nil},
        __obj.OtherCharges map { scalaxb.toXML[com.ups.ship.OtherChargesType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("OtherCharges"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CurrencyCode, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CurrencyCode"), __scope, false),
        __obj.BlanketPeriod map { scalaxb.toXML[com.ups.ship.BlanketPeriodType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("BlanketPeriod"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultShipInternationalFormTypeSequence3Format extends scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.InternationalFormTypeSequence3] = Left("don't call me.")
    
    def writes(__obj: com.ups.ship.InternationalFormTypeSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.ExportDate map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ExportDate"), __scope, false) } getOrElse {Nil},
        __obj.ExportingCarrier map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ExportingCarrier"), __scope, false) } getOrElse {Nil},
        __obj.CarrierID map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CarrierID"), __scope, false) } getOrElse {Nil},
        __obj.InBondCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("InBondCode"), __scope, false) } getOrElse {Nil},
        __obj.EntryNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("EntryNumber"), __scope, false) } getOrElse {Nil},
        __obj.PointOfOrigin map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PointOfOrigin"), __scope, false) } getOrElse {Nil},
        __obj.ModeOfTransport map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ModeOfTransport"), __scope, false) } getOrElse {Nil},
        __obj.PortOfExport map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PortOfExport"), __scope, false) } getOrElse {Nil},
        __obj.PortOfUnloading map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PortOfUnloading"), __scope, false) } getOrElse {Nil},
        __obj.LoadingPier map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("LoadingPier"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultShipInternationalFormTypeSequence4Format extends scalaxb.XMLFormat[com.ups.ship.InternationalFormTypeSequence4] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.InternationalFormTypeSequence4] = Left("don't call me.")
    
    def writes(__obj: com.ups.ship.InternationalFormTypeSequence4, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.PartiesToTransaction map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PartiesToTransaction"), __scope, false) } getOrElse {Nil},
        __obj.RoutedExportTransactionIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("RoutedExportTransactionIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ContainerizedIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ContainerizedIndicator"), __scope, false) } getOrElse {Nil},
        __obj.License map { scalaxb.toXML[com.ups.ship.LicenseType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("License"), __scope, false) } getOrElse {Nil},
        __obj.ECCNNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ECCNNumber"), __scope, false) } getOrElse {Nil},
        __obj.OverridePaperlessIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("OverridePaperlessIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ShipperMemo map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ShipperMemo"), __scope, false) } getOrElse {Nil},
        __obj.MultiCurrencyInvoiceLineTotal map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("MultiCurrencyInvoiceLineTotal"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultShipUserCreatedFormTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.UserCreatedFormType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("UserCreatedFormType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.UserCreatedFormType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "DocumentID")) ^^
      { case p1 =>
      com.ups.ship.UserCreatedFormType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.ups.ship.UserCreatedFormType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DocumentID flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("DocumentID"), __scope, false) })

  }

  trait DefaultShipContactTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ContactType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ContactType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ContactType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ForwardAgent")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "UltimateConsignee")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "IntermediateConsignee")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Producer")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "SoldTo")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.ContactType(p1.headOption map { scalaxb.fromXML[com.ups.ship.ForwardAgentType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.UltimateConsigneeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.IntermediateConsigneeType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ProducerType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.ups.ship.SoldToType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ContactType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ForwardAgent map { scalaxb.toXML[com.ups.ship.ForwardAgentType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ForwardAgent"), __scope, false) } getOrElse {Nil},
        __obj.UltimateConsignee map { scalaxb.toXML[com.ups.ship.UltimateConsigneeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("UltimateConsignee"), __scope, false) } getOrElse {Nil},
        __obj.IntermediateConsignee map { scalaxb.toXML[com.ups.ship.IntermediateConsigneeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("IntermediateConsignee"), __scope, false) } getOrElse {Nil},
        __obj.Producer map { scalaxb.toXML[com.ups.ship.ProducerType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Producer"), __scope, false) } getOrElse {Nil},
        __obj.SoldTo map { scalaxb.toXML[com.ups.ship.SoldToType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("SoldTo"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipForwardAgentTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ForwardAgentType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ForwardAgentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ForwardAgentType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CompanyName")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "TaxIdentificationNumber")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Address")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.ForwardAgentType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.AddressType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ForwardAgentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CompanyName, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CompanyName"), __scope, false),
        scalaxb.toXML[String](__obj.TaxIdentificationNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("TaxIdentificationNumber"), __scope, false),
        scalaxb.toXML[com.ups.ship.AddressType](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Address"), __scope, false))

  }

  trait DefaultShipAddressTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.AddressType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("AddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.AddressType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "AddressLine")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "City")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "StateProvinceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Town")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PostalCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CountryCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.ups.ship.AddressType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.AddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AddressLine flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("AddressLine"), __scope, false) },
        scalaxb.toXML[String](__obj.City, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("City"), __scope, false),
        __obj.StateProvinceCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("StateProvinceCode"), __scope, false) } getOrElse {Nil},
        __obj.Town map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Town"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CountryCode, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CountryCode"), __scope, false))

  }

  trait DefaultShipUltimateConsigneeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.UltimateConsigneeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("UltimateConsigneeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.UltimateConsigneeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CompanyName")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Address")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.UltimateConsigneeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.AddressType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.UltimateConsigneeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CompanyName, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CompanyName"), __scope, false),
        scalaxb.toXML[com.ups.ship.AddressType](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Address"), __scope, false))

  }

  trait DefaultShipIntermediateConsigneeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.IntermediateConsigneeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("IntermediateConsigneeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.IntermediateConsigneeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CompanyName")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Address")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.IntermediateConsigneeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.AddressType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.IntermediateConsigneeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CompanyName, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CompanyName"), __scope, false),
        scalaxb.toXML[com.ups.ship.AddressType](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Address"), __scope, false))

  }

  trait DefaultShipProducerTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ProducerType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ProducerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ProducerType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Option")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CompanyName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "TaxIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Address")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "AttentionName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "EMailAddress")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.ups.ship.ProducerType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.AddressType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.ups.ship.PhoneType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ProducerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Option map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Option"), __scope, false) } getOrElse {Nil},
        __obj.CompanyName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CompanyName"), __scope, false) } getOrElse {Nil},
        __obj.TaxIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("TaxIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Address map { scalaxb.toXML[com.ups.ship.AddressType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Address"), __scope, false) } getOrElse {Nil},
        __obj.AttentionName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("AttentionName"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.PhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.EMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("EMailAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipProductTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ProductType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ProductType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ProductType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Unit")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "CommodityCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PartNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "OriginCountryCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "JointProductionIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "NetCostCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "NetCostDateRange")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PreferenceCriteria")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ProducerInfo")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "MarksAndNumbers")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "NumberOfPackagesPerCommodity")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ProductWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "VehicleID")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ScheduleB")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ExportType")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "SEDTotalValue")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ExcludeFromForm")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ProductCurrencyCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PackingListInfo")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      com.ups.ship.ProductType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.UnitType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.ups.ship.NetCostDateType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[com.ups.ship.ProductWeightType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.ups.ship.ScheduleBType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[com.ups.ship.ExcludeFromFormType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[com.ups.ship.PackingListInfoType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ProductType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Description"), __scope, false) },
        __obj.Unit map { scalaxb.toXML[com.ups.ship.UnitType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Unit"), __scope, false) } getOrElse {Nil},
        __obj.CommodityCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("CommodityCode"), __scope, false) } getOrElse {Nil},
        __obj.PartNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PartNumber"), __scope, false) } getOrElse {Nil},
        __obj.OriginCountryCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("OriginCountryCode"), __scope, false) } getOrElse {Nil},
        __obj.JointProductionIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("JointProductionIndicator"), __scope, false) } getOrElse {Nil},
        __obj.NetCostCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("NetCostCode"), __scope, false) } getOrElse {Nil},
        __obj.NetCostDateRange map { scalaxb.toXML[com.ups.ship.NetCostDateType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("NetCostDateRange"), __scope, false) } getOrElse {Nil},
        __obj.PreferenceCriteria map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PreferenceCriteria"), __scope, false) } getOrElse {Nil},
        __obj.ProducerInfo map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ProducerInfo"), __scope, false) } getOrElse {Nil},
        __obj.MarksAndNumbers map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("MarksAndNumbers"), __scope, false) } getOrElse {Nil},
        __obj.NumberOfPackagesPerCommodity map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("NumberOfPackagesPerCommodity"), __scope, false) } getOrElse {Nil},
        __obj.ProductWeight map { scalaxb.toXML[com.ups.ship.ProductWeightType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ProductWeight"), __scope, false) } getOrElse {Nil},
        __obj.VehicleID map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("VehicleID"), __scope, false) } getOrElse {Nil},
        __obj.ScheduleB map { scalaxb.toXML[com.ups.ship.ScheduleBType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ScheduleB"), __scope, false) } getOrElse {Nil},
        __obj.ExportType map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ExportType"), __scope, false) } getOrElse {Nil},
        __obj.SEDTotalValue map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("SEDTotalValue"), __scope, false) } getOrElse {Nil},
        __obj.ExcludeFromForm map { scalaxb.toXML[com.ups.ship.ExcludeFromFormType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ExcludeFromForm"), __scope, false) } getOrElse {Nil},
        __obj.ProductCurrencyCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ProductCurrencyCode"), __scope, false) } getOrElse {Nil},
        __obj.PackingListInfo map { scalaxb.toXML[com.ups.ship.PackingListInfoType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PackingListInfo"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipExcludeFromFormTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ExcludeFromFormType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ExcludeFromFormType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ExcludeFromFormType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "FormType")) ^^
      { case p1 =>
      com.ups.ship.ExcludeFromFormType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.ups.ship.ExcludeFromFormType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.FormType flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("FormType"), __scope, false) })

  }

  trait DefaultShipUnitTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.UnitType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("UnitType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.UnitType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Number")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "UnitOfMeasurement")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Value")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.UnitType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.UnitOfMeasurementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.UnitType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Number, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Number"), __scope, false),
        scalaxb.toXML[com.ups.ship.UnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("UnitOfMeasurement"), __scope, false),
        scalaxb.toXML[String](__obj.Value, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Value"), __scope, false))

  }

  trait DefaultShipPackingListInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackingListInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("PackingListInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackingListInfoType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PackageAssociated")) ^^
      { case p1 =>
      com.ups.ship.PackingListInfoType(p1.toSeq map { scalaxb.fromXML[com.ups.ship.PackageAssociatedType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.ups.ship.PackingListInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PackageAssociated flatMap { scalaxb.toXML[com.ups.ship.PackageAssociatedType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PackageAssociated"), __scope, false) })

  }

  trait DefaultShipPackageAssociatedTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackageAssociatedType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("PackageAssociatedType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackageAssociatedType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "PackageNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ProductAmount")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PackageAssociatedType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PackageAssociatedType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PackageNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("PackageNumber"), __scope, false) } getOrElse {Nil},
        __obj.ProductAmount map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ProductAmount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipUnitOfMeasurementTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.UnitOfMeasurementType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("UnitOfMeasurementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.UnitOfMeasurementType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.UnitOfMeasurementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.UnitOfMeasurementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipNetCostDateTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.NetCostDateType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("NetCostDateType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.NetCostDateType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "BeginDate")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "EndDate")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.NetCostDateType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.NetCostDateType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.BeginDate, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("BeginDate"), __scope, false),
        scalaxb.toXML[String](__obj.EndDate, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("EndDate"), __scope, false))

  }

  trait DefaultShipProductWeightTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ProductWeightType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ProductWeightType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ProductWeightType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "UnitOfMeasurement")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Weight")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ProductWeightType(scalaxb.fromXML[com.ups.ship.UnitOfMeasurementType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ProductWeightType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.UnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("UnitOfMeasurement"), __scope, false),
        scalaxb.toXML[String](__obj.Weight, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Weight"), __scope, false))

  }

  trait DefaultShipScheduleBTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ScheduleBType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("ScheduleBType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ScheduleBType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Quantity")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "UnitOfMeasurement")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.ScheduleBType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.UnitOfMeasurementType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ScheduleBType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Number, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Number"), __scope, false),
        __obj.Quantity map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Quantity"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.UnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("UnitOfMeasurement"), __scope, false))

  }

  trait DefaultShipIFChargesTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.IFChargesType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("IFChargesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.IFChargesType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "MonetaryValue")) ^^
      { case p1 =>
      com.ups.ship.IFChargesType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.IFChargesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.MonetaryValue, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("MonetaryValue"), __scope, false))

  }

  trait DefaultShipOtherChargesTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.OtherChargesType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("OtherChargesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.OtherChargesType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "MonetaryValue")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.OtherChargesType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.OtherChargesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.MonetaryValue, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("MonetaryValue"), __scope, false),
        scalaxb.toXML[String](__obj.Description, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Description"), __scope, false))

  }

  trait DefaultShipBlanketPeriodTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BlanketPeriodType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("BlanketPeriodType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BlanketPeriodType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "BeginDate")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "EndDate")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.BlanketPeriodType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.BlanketPeriodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.BeginDate, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("BeginDate"), __scope, false),
        scalaxb.toXML[String](__obj.EndDate, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("EndDate"), __scope, false))

  }

  trait DefaultShipLicenseTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LicenseType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("LicenseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LicenseType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Date")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "ExceptionCode")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.LicenseType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LicenseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Number map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Number"), __scope, false) } getOrElse {Nil},
        __obj.Date map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Date"), __scope, false) } getOrElse {Nil},
        __obj.ExceptionCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("ExceptionCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipSoldToTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.SoldToType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("SoldToType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.SoldToType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "AttentionName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "TaxIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Option")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Address")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "EMailAddress")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.ups.ship.SoldToType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.PhoneType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.AddressType](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.SoldToType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Name"), __scope, false),
        scalaxb.toXML[String](__obj.AttentionName, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("AttentionName"), __scope, false),
        __obj.TaxIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("TaxIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.PhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Option map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Option"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.AddressType](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Address"), __scope, false),
        __obj.EMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("EMailAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPhoneTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PhoneType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0")
    
    override def typeName: Option[String] = Some("PhoneType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PhoneType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), "Extension")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PhoneType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PhoneType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Number, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Number"), __scope, false),
        __obj.Extension map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/IF/v1.0"), Some("Extension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPropertyFormat extends scalaxb.XMLFormat[com.ups.ship.Property] with scalaxb.CanWriteChildNodes[com.ups.ship.Property] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.Property] = seq match {
      case node: scala.xml.Node => Right(com.ups.ship.Property(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@Key"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.ups.ship.Property, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "Key", __obj.Key.toString, attr)
      attr
    }

    def writesChildNodes(__obj: com.ups.ship.Property, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultShipClientInformationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ClientInformationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0")
    
    override def typeName: Option[String] = Some("ClientInformationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ClientInformationType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Property")) ^^
      { case p1 =>
      com.ups.ship.ClientInformationType(p1.toSeq map { scalaxb.fromXML[com.ups.ship.Property](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.ups.ship.ClientInformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Property flatMap { scalaxb.toXML[com.ups.ship.Property](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Property"), __scope, false) })

  }

  trait DefaultShipRequestTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.RequestType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0")
    
    override def typeName: Option[String] = Some("RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.RequestType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "RequestOption")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "TransactionReference")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.RequestType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.TransactionReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RequestOption flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("RequestOption"), __scope, false) },
        __obj.TransactionReference map { scalaxb.toXML[com.ups.ship.TransactionReferenceType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("TransactionReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipTransactionReferenceTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.TransactionReferenceType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0")
    
    override def typeName: Option[String] = Some("TransactionReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.TransactionReferenceType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "CustomerContext")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "TransactionIdentifier")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.TransactionReferenceType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.TransactionReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CustomerContext map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("CustomerContext"), __scope, false) } getOrElse {Nil},
        __obj.TransactionIdentifier map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("TransactionIdentifier"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipResponseTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ResponseType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0")
    
    override def typeName: Option[String] = Some("ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ResponseType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "ResponseStatus")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Alert")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "TransactionReference")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.ResponseType(scalaxb.fromXML[com.ups.ship.CodeDescriptionType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[com.ups.ship.CodeDescriptionType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.TransactionReferenceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.CodeDescriptionType](__obj.ResponseStatus, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("ResponseStatus"), __scope, false),
        __obj.Alert flatMap { scalaxb.toXML[com.ups.ship.CodeDescriptionType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Alert"), __scope, false) },
        __obj.TransactionReference map { scalaxb.toXML[com.ups.ship.TransactionReferenceType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("TransactionReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipCodeDescriptionTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CodeDescriptionType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0")
    
    override def typeName: Option[String] = Some("CodeDescriptionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CodeDescriptionType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Code")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.CodeDescriptionType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.CodeDescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Code"), __scope, false),
        scalaxb.toXML[String](__obj.Description, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Description"), __scope, false))

  }

  trait DefaultShipShipmentRequestFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentRequest] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentRequest] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Request")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Shipment")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelSpecification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReceiptSpecification")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.ShipmentRequest(scalaxb.fromXML[com.ups.ship.RequestType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipmentType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.ups.ship.LabelSpecificationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ReceiptSpecificationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.RequestType](__obj.Request, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Request"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipmentType](__obj.Shipment, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Shipment"), __scope, false),
        __obj.LabelSpecification map { scalaxb.toXML[com.ups.ship.LabelSpecificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelSpecification"), __scope, false) } getOrElse {Nil},
        __obj.ReceiptSpecification map { scalaxb.toXML[com.ups.ship.ReceiptSpecificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReceiptSpecification"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipConfirmRequestFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipConfirmRequest] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipConfirmRequest] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Request")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Shipment")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelSpecification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReceiptSpecification")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.ShipConfirmRequest(scalaxb.fromXML[com.ups.ship.RequestType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipmentType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.ups.ship.LabelSpecificationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ReceiptSpecificationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipConfirmRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.RequestType](__obj.Request, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Request"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipmentType](__obj.Shipment, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Shipment"), __scope, false),
        __obj.LabelSpecification map { scalaxb.toXML[com.ups.ship.LabelSpecificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelSpecification"), __scope, false) } getOrElse {Nil},
        __obj.ReceiptSpecification map { scalaxb.toXML[com.ups.ship.ReceiptSpecificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReceiptSpecification"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipAcceptRequestFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipAcceptRequest] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipAcceptRequest] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Request")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentDigest")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipAcceptRequest(scalaxb.fromXML[com.ups.ship.RequestType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipAcceptRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.RequestType](__obj.Request, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Request"), __scope, false),
        scalaxb.toXML[String](__obj.ShipmentDigest, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentDigest"), __scope, false))

  }

  trait DefaultShipShipmentResponseFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentResponse] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentResponse] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Response")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentResults")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipmentResponse(scalaxb.fromXML[com.ups.ship.ResponseType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipmentResultsType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ResponseType](__obj.Response, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Response"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipmentResultsType](__obj.ShipmentResults, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentResults"), __scope, false))

  }

  trait DefaultShipShipConfirmResponseFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipConfirmResponse] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipConfirmResponse] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Response")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentResults")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipConfirmResponse(scalaxb.fromXML[com.ups.ship.ResponseType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipmentResultsType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipConfirmResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ResponseType](__obj.Response, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Response"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipmentResultsType](__obj.ShipmentResults, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentResults"), __scope, false))

  }

  trait DefaultShipShipAcceptResponseFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipAcceptResponse] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipAcceptResponse] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), "Response")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentResults")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipAcceptResponse(scalaxb.fromXML[com.ups.ship.ResponseType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipmentResultsType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipAcceptResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ResponseType](__obj.Response, Some("http://www.ups.com/XMLSchema/XOLTWS/Common/v1.0"), Some("Response"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipmentResultsType](__obj.ShipmentResults, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentResults"), __scope, false))

  }

  trait DefaultShipShipmentServiceOptionsFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentServiceOptions] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentServiceOptions] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "SaturdayDeliveryIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "COD")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Notification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelDelivery")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "InternationalForms")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DeliveryConfirmation")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReturnOfDocumentIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImportControlIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CommercialInvoiceRemovalIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UPScarbonneutralIndicator")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PreAlertNotification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ExchangeForwardIndicator")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      com.ups.ship.ShipmentServiceOptions(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.CODType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.ups.ship.NotificationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.LabelDeliveryType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.ups.ship.InternationalFormType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.ups.ship.DeliveryConfirmationType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.ups.ship.LabelMethodType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[com.ups.ship.PreAlertNotificationType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentServiceOptions, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SaturdayDeliveryIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("SaturdayDeliveryIndicator"), __scope, false) } getOrElse {Nil},
        __obj.COD map { scalaxb.toXML[com.ups.ship.CODType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("COD"), __scope, false) } getOrElse {Nil},
        __obj.Notification flatMap { scalaxb.toXML[com.ups.ship.NotificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Notification"), __scope, false) },
        __obj.LabelDelivery map { scalaxb.toXML[com.ups.ship.LabelDeliveryType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelDelivery"), __scope, false) } getOrElse {Nil},
        __obj.InternationalForms map { scalaxb.toXML[com.ups.ship.InternationalFormType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("InternationalForms"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryConfirmation map { scalaxb.toXML[com.ups.ship.DeliveryConfirmationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DeliveryConfirmation"), __scope, false) } getOrElse {Nil},
        __obj.ReturnOfDocumentIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReturnOfDocumentIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ImportControlIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImportControlIndicator"), __scope, false) } getOrElse {Nil},
        __obj.LabelMethod map { scalaxb.toXML[com.ups.ship.LabelMethodType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelMethod"), __scope, false) } getOrElse {Nil},
        __obj.CommercialInvoiceRemovalIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CommercialInvoiceRemovalIndicator"), __scope, false) } getOrElse {Nil},
        __obj.UPScarbonneutralIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UPScarbonneutralIndicator"), __scope, false) } getOrElse {Nil},
        __obj.PreAlertNotification flatMap { scalaxb.toXML[com.ups.ship.PreAlertNotificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PreAlertNotification"), __scope, false) },
        __obj.ExchangeForwardIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ExchangeForwardIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipmentTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipmentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReturnService")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DocumentsOnlyIndicator")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Shipper")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipTo")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PaymentInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FRSPaymentInformation")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "GoodsNotInFreeCirculationIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentRatingOptions")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "MovementReferenceNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReferenceNumber")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Service")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "InvoiceLineTotal")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentServiceOptions")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Package")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      com.ups.ship.ShipmentType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.ReturnServiceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.ShipperType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipToType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[com.ups.ship.ShipFromType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[com.ups.ship.PaymentInfoType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.ups.ship.FRSPaymentInfoType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.ups.ship.RateInfoType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[com.ups.ship.ReferenceNumberType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.ServiceType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[com.ups.ship.CurrencyMonetaryType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[com.ups.ship.ShipmentServiceOptions](_, scalaxb.ElemName(node) :: stack) },
        p16.toSeq map { scalaxb.fromXML[com.ups.ship.PackageType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.ReturnService map { scalaxb.toXML[com.ups.ship.ReturnServiceType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReturnService"), __scope, false) } getOrElse {Nil},
        __obj.DocumentsOnlyIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DocumentsOnlyIndicator"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.ShipperType](__obj.Shipper, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Shipper"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipToType](__obj.ShipTo, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipTo"), __scope, false),
        __obj.ShipFrom map { scalaxb.toXML[com.ups.ship.ShipFromType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipFrom"), __scope, false) } getOrElse {Nil},
        __obj.PaymentInformation map { scalaxb.toXML[com.ups.ship.PaymentInfoType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PaymentInformation"), __scope, false) } getOrElse {Nil},
        __obj.FRSPaymentInformation map { scalaxb.toXML[com.ups.ship.FRSPaymentInfoType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FRSPaymentInformation"), __scope, false) } getOrElse {Nil},
        __obj.GoodsNotInFreeCirculationIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("GoodsNotInFreeCirculationIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentRatingOptions map { scalaxb.toXML[com.ups.ship.RateInfoType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentRatingOptions"), __scope, false) } getOrElse {Nil},
        __obj.MovementReferenceNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("MovementReferenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.ReferenceNumber flatMap { scalaxb.toXML[com.ups.ship.ReferenceNumberType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReferenceNumber"), __scope, false) },
        scalaxb.toXML[com.ups.ship.ServiceType](__obj.Service, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Service"), __scope, false),
        __obj.InvoiceLineTotal map { scalaxb.toXML[com.ups.ship.CurrencyMonetaryType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("InvoiceLineTotal"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentServiceOptions map { scalaxb.toXML[com.ups.ship.ShipmentServiceOptions](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentServiceOptions"), __scope, false) } getOrElse {Nil},
        __obj.Package flatMap { scalaxb.toXML[com.ups.ship.PackageType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Package"), __scope, false) })

  }

  trait DefaultShipReturnServiceTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ReturnServiceType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ReturnServiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ReturnServiceType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ReturnServiceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ReturnServiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipperTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipperType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipperType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AttentionName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TaxIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipperNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FaxNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMailAddress")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.ups.ship.ShipperType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ShipPhoneType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.ShipAddressTypable](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Name"), __scope, false),
        __obj.AttentionName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AttentionName"), __scope, false) } getOrElse {Nil},
        __obj.TaxIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TaxIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.ShipPhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.ShipperNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipperNumber"), __scope, false) } getOrElse {Nil},
        __obj.FaxNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FaxNumber"), __scope, false) } getOrElse {Nil},
        __obj.EMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMailAddress"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.ShipAddressTypable](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false))

  }

  trait DefaultShipCompanyInfoTypableFormat extends scalaxb.XMLFormat[com.ups.ship.CompanyInfoTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.CompanyInfoTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipperType")) => Right(scalaxb.fromXML[com.ups.ship.ShipperType](node, stack))
          case (Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipToType")) => Right(scalaxb.fromXML[com.ups.ship.ShipToType](node, stack))
          case (Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipFromType")) => Right(scalaxb.fromXML[com.ups.ship.ShipFromType](node, stack))
          case _ => Right(scalaxb.fromXML[com.ups.ship.CompanyInfoType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.ups.ship.CompanyInfoTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.ups.ship.ShipperType => scalaxb.toXML[com.ups.ship.ShipperType](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.ShipToType => scalaxb.toXML[com.ups.ship.ShipToType](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.ShipFromType => scalaxb.toXML[com.ups.ship.ShipFromType](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.CompanyInfoType => scalaxb.toXML[com.ups.ship.CompanyInfoType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultShipCompanyInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CompanyInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("CompanyInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CompanyInfoType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AttentionName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TaxIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Phone")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.CompanyInfoType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ShipPhoneType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.CompanyInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Name"), __scope, false),
        __obj.AttentionName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AttentionName"), __scope, false) } getOrElse {Nil},
        __obj.TaxIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TaxIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.ShipPhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipPhoneTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipPhoneType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipPhoneType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipPhoneType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Number")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Extension")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipPhoneType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipPhoneType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Number, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Number"), __scope, false),
        __obj.Extension map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Extension"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipAddressTypableFormat extends scalaxb.XMLFormat[com.ups.ship.ShipAddressTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.ShipAddressTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipToAddressType")) => Right(scalaxb.fromXML[com.ups.ship.ShipToAddressType](node, stack))
          case _ => Right(scalaxb.fromXML[com.ups.ship.ShipAddressType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.ups.ship.ShipAddressTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.ups.ship.ShipToAddressType => scalaxb.toXML[com.ups.ship.ShipToAddressType](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.ShipAddressType => scalaxb.toXML[com.ups.ship.ShipAddressType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultShipShipAddressTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipAddressType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipAddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipAddressType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AddressLine")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "City")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "StateProvinceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PostalCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CountryCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.ShipAddressType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipAddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AddressLine flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AddressLine"), __scope, false) },
        scalaxb.toXML[String](__obj.City, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("City"), __scope, false),
        __obj.StateProvinceCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("StateProvinceCode"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CountryCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CountryCode"), __scope, false))

  }

  trait DefaultShipShipToTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipToType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipToType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipToType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AttentionName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TaxIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FaxNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMailAddress")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LocationID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.ups.ship.ShipToType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ShipPhoneType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.ShipToAddressType](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipToType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Name"), __scope, false),
        __obj.AttentionName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AttentionName"), __scope, false) } getOrElse {Nil},
        __obj.TaxIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TaxIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.ShipPhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.FaxNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FaxNumber"), __scope, false) } getOrElse {Nil},
        __obj.EMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMailAddress"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.ShipToAddressType](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false),
        __obj.LocationID map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LocationID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipToAddressTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipToAddressType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipToAddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipToAddressType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AddressLine")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "City")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "StateProvinceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PostalCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CountryCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ResidentialAddressIndicator")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.ups.ship.ShipToAddressType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipToAddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AddressLine flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AddressLine"), __scope, false) },
        scalaxb.toXML[String](__obj.City, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("City"), __scope, false),
        __obj.StateProvinceCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("StateProvinceCode"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CountryCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CountryCode"), __scope, false),
        __obj.ResidentialAddressIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ResidentialAddressIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipFromTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipFromType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipFromType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipFromType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AttentionName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TaxIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FaxNumber")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.ups.ship.ShipFromType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ShipPhoneType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.ShipAddressTypable](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipFromType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Name, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Name"), __scope, false),
        __obj.AttentionName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AttentionName"), __scope, false) } getOrElse {Nil},
        __obj.TaxIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TaxIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.ShipPhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.FaxNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FaxNumber"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.ShipAddressTypable](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false))

  }

  trait DefaultShipPrepaidTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PrepaidType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PrepaidType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PrepaidType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BillShipper")) ^^
      { case p1 =>
      com.ups.ship.PrepaidType(scalaxb.fromXML[com.ups.ship.BillShipperType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PrepaidType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.ups.ship.BillShipperType](__obj.BillShipper, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BillShipper"), __scope, false))

  }

  trait DefaultShipBillShipperTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BillShipperType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("BillShipperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BillShipperType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AccountNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CreditCard")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.BillShipperType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.CreditCardType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.BillShipperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AccountNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AccountNumber"), __scope, false) } getOrElse {Nil},
        __obj.CreditCard map { scalaxb.toXML[com.ups.ship.CreditCardType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CreditCard"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipCreditCardTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CreditCardType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("CreditCardType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CreditCardType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Type")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Number")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ExpirationDate")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "SecurityCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.CreditCardType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[com.ups.ship.CreditCardAddressType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.CreditCardType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Type, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Type"), __scope, false),
        scalaxb.toXML[String](__obj.Number, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Number"), __scope, false),
        scalaxb.toXML[String](__obj.ExpirationDate, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ExpirationDate"), __scope, false),
        scalaxb.toXML[String](__obj.SecurityCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("SecurityCode"), __scope, false),
        __obj.Address map { scalaxb.toXML[com.ups.ship.CreditCardAddressType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipCreditCardAddressTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CreditCardAddressType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("CreditCardAddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CreditCardAddressType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AddressLine")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "City")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "StateProvinceCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PostalCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CountryCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.CreditCardAddressType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.CreditCardAddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.AddressLine flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AddressLine"), __scope, false) },
        scalaxb.toXML[String](__obj.City, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("City"), __scope, false),
        scalaxb.toXML[String](__obj.StateProvinceCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("StateProvinceCode"), __scope, false),
        scalaxb.toXML[String](__obj.PostalCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PostalCode"), __scope, false),
        scalaxb.toXML[String](__obj.CountryCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CountryCode"), __scope, false))

  }

  trait DefaultShipBillThirdPartyChargeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BillThirdPartyChargeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("BillThirdPartyChargeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BillThirdPartyChargeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AccountNumber")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.BillThirdPartyChargeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.AccountAddressType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.BillThirdPartyChargeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.AccountNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AccountNumber"), __scope, false),
        scalaxb.toXML[com.ups.ship.AccountAddressType](__obj.Address, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false))

  }

  trait DefaultShipAccountAddressTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.AccountAddressType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("AccountAddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.AccountAddressType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PostalCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CountryCode")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.AccountAddressType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.AccountAddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.PostalCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CountryCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CountryCode"), __scope, false))

  }

  trait DefaultShipFreightCollectTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.FreightCollectType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("FreightCollectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.FreightCollectType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BillReceiver")) ^^
      { case p1 =>
      com.ups.ship.FreightCollectType(scalaxb.fromXML[com.ups.ship.BillReceiverType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.FreightCollectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.ups.ship.BillReceiverType](__obj.BillReceiver, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BillReceiver"), __scope, false))

  }

  trait DefaultShipBillReceiverTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BillReceiverType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("BillReceiverType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BillReceiverType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AccountNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.BillReceiverType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.ups.ship.BillReceiverAddressType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.BillReceiverType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.AccountNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AccountNumber"), __scope, false),
        __obj.Address map { scalaxb.toXML[com.ups.ship.BillReceiverAddressType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipBillReceiverAddressTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BillReceiverAddressType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("BillReceiverAddressType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BillReceiverAddressType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PostalCode")) ^^
      { case p1 =>
      com.ups.ship.BillReceiverAddressType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.BillReceiverAddressType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PostalCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PostalCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPaymentInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PaymentInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PaymentInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PaymentInfoType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "SplitDutyVATIndicator")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PaymentInfoType(p1.toSeq map { scalaxb.fromXML[com.ups.ship.ShipmentChargeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PaymentInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ShipmentCharge flatMap { scalaxb.toXML[com.ups.ship.ShipmentChargeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentCharge"), __scope, false) },
        __obj.SplitDutyVATIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("SplitDutyVATIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipmentChargeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentChargeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipmentChargeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentChargeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Type")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BillShipper")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BillReceiver")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BillThirdParty")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ConsigneeBilledIndicator")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.ShipmentChargeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.ups.ship.BillShipperType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.BillReceiverType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.BillThirdPartyChargeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentChargeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Type, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Type"), __scope, false),
        __obj.BillShipper map { scalaxb.toXML[com.ups.ship.BillShipperType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BillShipper"), __scope, false) } getOrElse {Nil},
        __obj.BillReceiver map { scalaxb.toXML[com.ups.ship.BillReceiverType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BillReceiver"), __scope, false) } getOrElse {Nil},
        __obj.BillThirdParty map { scalaxb.toXML[com.ups.ship.BillThirdPartyChargeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BillThirdParty"), __scope, false) } getOrElse {Nil},
        __obj.ConsigneeBilledIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ConsigneeBilledIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipFRSPaymentInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.FRSPaymentInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("FRSPaymentInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.FRSPaymentInfoType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Type")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AccountNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Address")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.FRSPaymentInfoType(scalaxb.fromXML[com.ups.ship.PaymentType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.ups.ship.AccountAddressType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.FRSPaymentInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.PaymentType](__obj.Type, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Type"), __scope, false),
        scalaxb.toXML[String](__obj.AccountNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AccountNumber"), __scope, false),
        __obj.Address map { scalaxb.toXML[com.ups.ship.AccountAddressType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPaymentTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PaymentType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PaymentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PaymentType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PaymentType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PaymentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipRateInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.RateInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("RateInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.RateInfoType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "NegotiatedRatesIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FRSShipmentIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "RateChartIndicator")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.RateInfoType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.RateInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.NegotiatedRatesIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("NegotiatedRatesIndicator"), __scope, false) } getOrElse {Nil},
        __obj.FRSShipmentIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FRSShipmentIndicator"), __scope, false) } getOrElse {Nil},
        __obj.RateChartIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("RateChartIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipReferenceNumberTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ReferenceNumberType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ReferenceNumberType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ReferenceNumberType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BarCodeIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Value")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.ReferenceNumberType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ReferenceNumberType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BarCodeIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BarCodeIndicator"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Value, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Value"), __scope, false))

  }

  trait DefaultShipServiceTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ServiceType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ServiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ServiceType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ServiceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ServiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipCurrencyMonetaryTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CurrencyMonetaryType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("CurrencyMonetaryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CurrencyMonetaryType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CurrencyCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "MonetaryValue")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.CurrencyMonetaryType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.CurrencyMonetaryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CurrencyCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CurrencyCode"), __scope, false),
        scalaxb.toXML[String](__obj.MonetaryValue, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("MonetaryValue"), __scope, false))

  }

  trait DefaultShipShipmentServiceOptionsTypableFormat extends scalaxb.XMLFormat[com.ups.ship.ShipmentServiceOptionsTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.ShipmentServiceOptionsTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          
          case _ => Right(scalaxb.fromXML[com.ups.ship.ShipmentServiceOptionsType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.ups.ship.ShipmentServiceOptionsTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.ups.ship.ShipmentServiceOptions => scalaxb.toXML[com.ups.ship.ShipmentServiceOptions](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.ShipmentServiceOptionsType => scalaxb.toXML[com.ups.ship.ShipmentServiceOptionsType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultShipShipmentServiceOptionsTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentServiceOptionsType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipmentServiceOptionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentServiceOptionsType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "SaturdayDeliveryIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "COD")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Notification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelDelivery")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "InternationalForms")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DeliveryConfirmation")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReturnOfDocumentIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImportControlIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelMethod")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CommercialInvoiceRemovalIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UPScarbonneutralIndicator")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PreAlertNotification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ExchangeForwardIndicator")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      com.ups.ship.ShipmentServiceOptionsType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.CODType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[com.ups.ship.NotificationType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.LabelDeliveryType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.ups.ship.InternationalFormType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.ups.ship.DeliveryConfirmationType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.ups.ship.LabelMethodType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[com.ups.ship.PreAlertNotificationType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentServiceOptionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SaturdayDeliveryIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("SaturdayDeliveryIndicator"), __scope, false) } getOrElse {Nil},
        __obj.COD map { scalaxb.toXML[com.ups.ship.CODType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("COD"), __scope, false) } getOrElse {Nil},
        __obj.Notification flatMap { scalaxb.toXML[com.ups.ship.NotificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Notification"), __scope, false) },
        __obj.LabelDelivery map { scalaxb.toXML[com.ups.ship.LabelDeliveryType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelDelivery"), __scope, false) } getOrElse {Nil},
        __obj.InternationalForms map { scalaxb.toXML[com.ups.ship.InternationalFormType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("InternationalForms"), __scope, false) } getOrElse {Nil},
        __obj.DeliveryConfirmation map { scalaxb.toXML[com.ups.ship.DeliveryConfirmationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DeliveryConfirmation"), __scope, false) } getOrElse {Nil},
        __obj.ReturnOfDocumentIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReturnOfDocumentIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ImportControlIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImportControlIndicator"), __scope, false) } getOrElse {Nil},
        __obj.LabelMethod map { scalaxb.toXML[com.ups.ship.LabelMethodType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelMethod"), __scope, false) } getOrElse {Nil},
        __obj.CommercialInvoiceRemovalIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CommercialInvoiceRemovalIndicator"), __scope, false) } getOrElse {Nil},
        __obj.UPScarbonneutralIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UPScarbonneutralIndicator"), __scope, false) } getOrElse {Nil},
        __obj.PreAlertNotification flatMap { scalaxb.toXML[com.ups.ship.PreAlertNotificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PreAlertNotification"), __scope, false) },
        __obj.ExchangeForwardIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ExchangeForwardIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPreAlertNotificationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PreAlertNotificationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PreAlertNotificationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PreAlertNotificationType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMailMessage")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "VoiceMessage")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TextMessage")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Locale")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.PreAlertNotificationType(p1.headOption map { scalaxb.fromXML[com.ups.ship.PreAlertEMailMessageType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.PreAlertVoiceMessageType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.PreAlertTextMessageType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.LocaleType](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PreAlertNotificationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EMailMessage map { scalaxb.toXML[com.ups.ship.PreAlertEMailMessageType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMailMessage"), __scope, false) } getOrElse {Nil},
        __obj.VoiceMessage map { scalaxb.toXML[com.ups.ship.PreAlertVoiceMessageType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("VoiceMessage"), __scope, false) } getOrElse {Nil},
        __obj.TextMessage map { scalaxb.toXML[com.ups.ship.PreAlertTextMessageType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TextMessage"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.LocaleType](__obj.Locale, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Locale"), __scope, false))

  }

  trait DefaultShipPreAlertEMailMessageTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PreAlertEMailMessageType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PreAlertEMailMessageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PreAlertEMailMessageType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UndeliverableEMailAddress")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PreAlertEMailMessageType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PreAlertEMailMessageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.EMailAddress, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMailAddress"), __scope, false),
        __obj.UndeliverableEMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UndeliverableEMailAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipLocaleTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LocaleType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LocaleType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LocaleType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Language")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Dialect")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.LocaleType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.LocaleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Language, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Language"), __scope, false),
        scalaxb.toXML[String](__obj.Dialect, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Dialect"), __scope, false))

  }

  trait DefaultShipPreAlertVoiceMessageTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PreAlertVoiceMessageType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PreAlertVoiceMessageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PreAlertVoiceMessageType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PhoneNumber")) ^^
      { case p1 =>
      com.ups.ship.PreAlertVoiceMessageType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PreAlertVoiceMessageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.PhoneNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PhoneNumber"), __scope, false))

  }

  trait DefaultShipPreAlertTextMessageTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PreAlertTextMessageType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PreAlertTextMessageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PreAlertTextMessageType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PhoneNumber")) ^^
      { case p1 =>
      com.ups.ship.PreAlertTextMessageType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PreAlertTextMessageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.PhoneNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PhoneNumber"), __scope, false))

  }

  trait DefaultShipContactInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ContactInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ContactInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ContactInfoType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Phone")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ContactInfoType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.ShipPhoneType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ContactInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Name map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[com.ups.ship.ShipPhoneType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Phone"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipCODTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CODType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("CODType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CODType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CODFundsCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CODAmount")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.CODType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.CurrencyMonetaryType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.CODType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CODFundsCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CODFundsCode"), __scope, false),
        scalaxb.toXML[com.ups.ship.CurrencyMonetaryType](__obj.CODAmount, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CODAmount"), __scope, false))

  }

  trait DefaultShipNotificationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.NotificationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("NotificationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.NotificationType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "NotificationCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMail")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.NotificationType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.EmailDetailsType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.NotificationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.NotificationCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("NotificationCode"), __scope, false),
        scalaxb.toXML[com.ups.ship.EmailDetailsType](__obj.EMail, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMail"), __scope, false))

  }

  trait DefaultShipLabelDeliveryTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LabelDeliveryType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LabelDeliveryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LabelDeliveryType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMail")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelLinksIndicator")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.LabelDeliveryType(p1.headOption map { scalaxb.fromXML[com.ups.ship.EmailDetailsType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LabelDeliveryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EMail map { scalaxb.toXML[com.ups.ship.EmailDetailsType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMail"), __scope, false) } getOrElse {Nil},
        __obj.LabelLinksIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelLinksIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipEmailDetailsTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.EmailDetailsType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("EmailDetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.EmailDetailsType] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UndeliverableEMailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FromEMailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FromName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Memo")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Subject")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "SubjectCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      com.ups.ship.EmailDetailsType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.EmailDetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EMailAddress flatMap { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMailAddress"), __scope, false) },
        __obj.UndeliverableEMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UndeliverableEMailAddress"), __scope, false) } getOrElse {Nil},
        __obj.FromEMailAddress map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FromEMailAddress"), __scope, false) } getOrElse {Nil},
        __obj.FromName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FromName"), __scope, false) } getOrElse {Nil},
        __obj.Memo map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Memo"), __scope, false) } getOrElse {Nil},
        __obj.Subject map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Subject"), __scope, false) } getOrElse {Nil},
        __obj.SubjectCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("SubjectCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPackageTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackageType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PackageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackageType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Packaging")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Dimensions")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PackageWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LargePackageIndicator")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReferenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "AdditionalHandlingIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PackageServiceOptions")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Commodity")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      com.ups.ship.PackageType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.PackagingType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.DimensionsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.PackageWeightType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[com.ups.ship.ReferenceNumberType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.ups.ship.PackageServiceOptionsType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.ups.ship.CommodityType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PackageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil},
        __obj.Packaging map { scalaxb.toXML[com.ups.ship.PackagingType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Packaging"), __scope, false) } getOrElse {Nil},
        __obj.Dimensions map { scalaxb.toXML[com.ups.ship.DimensionsType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Dimensions"), __scope, false) } getOrElse {Nil},
        __obj.PackageWeight map { scalaxb.toXML[com.ups.ship.PackageWeightType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PackageWeight"), __scope, false) } getOrElse {Nil},
        __obj.LargePackageIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LargePackageIndicator"), __scope, false) } getOrElse {Nil},
        __obj.ReferenceNumber flatMap { scalaxb.toXML[com.ups.ship.ReferenceNumberType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReferenceNumber"), __scope, false) },
        __obj.AdditionalHandlingIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("AdditionalHandlingIndicator"), __scope, false) } getOrElse {Nil},
        __obj.PackageServiceOptions map { scalaxb.toXML[com.ups.ship.PackageServiceOptionsType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PackageServiceOptions"), __scope, false) } getOrElse {Nil},
        __obj.Commodity map { scalaxb.toXML[com.ups.ship.CommodityType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Commodity"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPackagingTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackagingType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PackagingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackagingType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PackagingType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PackagingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipDimensionsTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.DimensionsType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("DimensionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.DimensionsType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UnitOfMeasurement")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Length")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Width")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Height")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.DimensionsType(scalaxb.fromXML[com.ups.ship.ShipUnitOfMeasurementType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.DimensionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ShipUnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UnitOfMeasurement"), __scope, false),
        scalaxb.toXML[String](__obj.Length, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Length"), __scope, false),
        scalaxb.toXML[String](__obj.Width, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Width"), __scope, false),
        scalaxb.toXML[String](__obj.Height, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Height"), __scope, false))

  }

  trait DefaultShipShipUnitOfMeasurementTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipUnitOfMeasurementType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipUnitOfMeasurementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipUnitOfMeasurementType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipUnitOfMeasurementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipUnitOfMeasurementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPackageWeightTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackageWeightType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PackageWeightType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackageWeightType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UnitOfMeasurement")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Weight")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PackageWeightType(scalaxb.fromXML[com.ups.ship.ShipUnitOfMeasurementType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PackageWeightType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ShipUnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UnitOfMeasurement"), __scope, false),
        scalaxb.toXML[String](__obj.Weight, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Weight"), __scope, false))

  }

  trait DefaultShipPackageServiceOptionsTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackageServiceOptionsType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PackageServiceOptionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackageServiceOptionsType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DeliveryConfirmation")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DeclaredValue")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "COD")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "VerbalConfirmation")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipperReleaseIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Notification")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReturnsFlexibleAccessIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DryIce")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      com.ups.ship.PackageServiceOptionsType(p1.headOption map { scalaxb.fromXML[com.ups.ship.DeliveryConfirmationType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.PackageDeclaredValueType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.PSOCODType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.VerbalConfirmationType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[com.ups.ship.PSONotificationType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[com.ups.ship.DryIceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PackageServiceOptionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DeliveryConfirmation map { scalaxb.toXML[com.ups.ship.DeliveryConfirmationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DeliveryConfirmation"), __scope, false) } getOrElse {Nil},
        __obj.DeclaredValue map { scalaxb.toXML[com.ups.ship.PackageDeclaredValueType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DeclaredValue"), __scope, false) } getOrElse {Nil},
        __obj.COD map { scalaxb.toXML[com.ups.ship.PSOCODType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("COD"), __scope, false) } getOrElse {Nil},
        __obj.VerbalConfirmation map { scalaxb.toXML[com.ups.ship.VerbalConfirmationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("VerbalConfirmation"), __scope, false) } getOrElse {Nil},
        __obj.ShipperReleaseIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipperReleaseIndicator"), __scope, false) } getOrElse {Nil},
        __obj.Notification map { scalaxb.toXML[com.ups.ship.PSONotificationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Notification"), __scope, false) } getOrElse {Nil},
        __obj.ReturnsFlexibleAccessIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReturnsFlexibleAccessIndicator"), __scope, false) } getOrElse {Nil},
        __obj.DryIce map { scalaxb.toXML[com.ups.ship.DryIceType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DryIce"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPackageDeclaredValueTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackageDeclaredValueType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PackageDeclaredValueType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackageDeclaredValueType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Type")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CurrencyCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "MonetaryValue")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.PackageDeclaredValueType(p1.headOption map { scalaxb.fromXML[com.ups.ship.DeclaredValueType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PackageDeclaredValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type map { scalaxb.toXML[com.ups.ship.DeclaredValueType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Type"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CurrencyCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CurrencyCode"), __scope, false),
        scalaxb.toXML[String](__obj.MonetaryValue, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("MonetaryValue"), __scope, false))

  }

  trait DefaultShipDeclaredValueTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.DeclaredValueType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("DeclaredValueType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.DeclaredValueType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.DeclaredValueType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.DeclaredValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipDeliveryConfirmationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.DeliveryConfirmationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("DeliveryConfirmationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.DeliveryConfirmationType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DCISType")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DCISNumber")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.DeliveryConfirmationType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.DeliveryConfirmationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.DCISType, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DCISType"), __scope, false),
        __obj.DCISNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DCISNumber"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipLabelMethodTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LabelMethodType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LabelMethodType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LabelMethodType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.LabelMethodType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LabelMethodType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipVerbalConfirmationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.VerbalConfirmationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("VerbalConfirmationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.VerbalConfirmationType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ContactInfo")) ^^
      { case p1 =>
      com.ups.ship.VerbalConfirmationType(p1.headOption map { scalaxb.fromXML[com.ups.ship.ContactInfoType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.VerbalConfirmationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ContactInfo map { scalaxb.toXML[com.ups.ship.ContactInfoType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ContactInfo"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPSOCODTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PSOCODType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PSOCODType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PSOCODType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CODFundsCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CODAmount")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PSOCODType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.CurrencyMonetaryType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PSOCODType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CODFundsCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CODFundsCode"), __scope, false),
        scalaxb.toXML[com.ups.ship.CurrencyMonetaryType](__obj.CODAmount, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CODAmount"), __scope, false))

  }

  trait DefaultShipPSONotificationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PSONotificationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PSONotificationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PSONotificationType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "NotificationCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "EMail")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.PSONotificationType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.EmailDetailsType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.PSONotificationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.NotificationCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("NotificationCode"), __scope, false),
        scalaxb.toXML[com.ups.ship.EmailDetailsType](__obj.EMail, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("EMail"), __scope, false))

  }

  trait DefaultShipLabelSpecificationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LabelSpecificationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LabelSpecificationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LabelSpecificationType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelImageFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "HTTPUserAgent")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelStockSize")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Instruction")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.LabelSpecificationType(scalaxb.fromXML[com.ups.ship.LabelImageFormatType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.LabelStockSizeType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[com.ups.ship.InstructionCodeDescriptionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LabelSpecificationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.LabelImageFormatType](__obj.LabelImageFormat, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelImageFormat"), __scope, false),
        __obj.HTTPUserAgent map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("HTTPUserAgent"), __scope, false) } getOrElse {Nil},
        __obj.LabelStockSize map { scalaxb.toXML[com.ups.ship.LabelStockSizeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelStockSize"), __scope, false) } getOrElse {Nil},
        __obj.Instruction flatMap { scalaxb.toXML[com.ups.ship.InstructionCodeDescriptionType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Instruction"), __scope, false) })

  }

  trait DefaultShipInstructionCodeDescriptionTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.InstructionCodeDescriptionType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("InstructionCodeDescriptionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.InstructionCodeDescriptionType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.InstructionCodeDescriptionType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.InstructionCodeDescriptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipLabelImageFormatTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LabelImageFormatType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LabelImageFormatType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LabelImageFormatType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.LabelImageFormatType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LabelImageFormatType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipLabelStockSizeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LabelStockSizeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LabelStockSizeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LabelStockSizeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Height")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Width")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.LabelStockSizeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.LabelStockSizeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Height, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Height"), __scope, false),
        scalaxb.toXML[String](__obj.Width, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Width"), __scope, false))

  }

  trait DefaultShipCommodityTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CommodityType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("CommodityType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CommodityType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FreightClass")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "NMFC")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.CommodityType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.ups.ship.NMFCType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.CommodityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.FreightClass, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FreightClass"), __scope, false),
        __obj.NMFC map { scalaxb.toXML[com.ups.ship.NMFCType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("NMFC"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipNMFCTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.NMFCType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("NMFCType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.NMFCType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PrimeCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "SubCode")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.NMFCType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.NMFCType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.PrimeCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PrimeCode"), __scope, false),
        __obj.SubCode map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("SubCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipmentResultsTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentResultsType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipmentResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentResultsType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "NegotiatedRateCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FRSShipmentData")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "BillingWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentIdentificationNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShipmentDigest")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PackageResults")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ControlLogReceipt")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Form")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CODTurnInPage")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "HighValueReport")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LabelURL")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LocalLanguageLabelURL")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ReceiptURL")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "LocalLanguageReceiptURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      com.ups.ship.ShipmentResultsType(p1.headOption map { scalaxb.fromXML[com.ups.ship.ShipmentChargesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.ups.ship.NegotiatedRateChargesType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.FRSShipmentDataType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.BillingWeightType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[com.ups.ship.PackageResultsType](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[com.ups.ship.ImageTypable](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[com.ups.ship.FormType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[com.ups.ship.SCReportType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[com.ups.ship.HighValueReportType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ShipmentCharges map { scalaxb.toXML[com.ups.ship.ShipmentChargesType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentCharges"), __scope, false) } getOrElse {Nil},
        __obj.NegotiatedRateCharges map { scalaxb.toXML[com.ups.ship.NegotiatedRateChargesType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("NegotiatedRateCharges"), __scope, false) } getOrElse {Nil},
        __obj.FRSShipmentData map { scalaxb.toXML[com.ups.ship.FRSShipmentDataType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FRSShipmentData"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.BillingWeightType](__obj.BillingWeight, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("BillingWeight"), __scope, false),
        __obj.ShipmentIdentificationNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentIdentificationNumber"), __scope, false) } getOrElse {Nil},
        __obj.ShipmentDigest map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShipmentDigest"), __scope, false) } getOrElse {Nil},
        __obj.PackageResults flatMap { scalaxb.toXML[com.ups.ship.PackageResultsType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PackageResults"), __scope, false) },
        __obj.ControlLogReceipt flatMap { scalaxb.toXML[com.ups.ship.ImageTypable](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ControlLogReceipt"), __scope, false) },
        __obj.Form map { scalaxb.toXML[com.ups.ship.FormType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Form"), __scope, false) } getOrElse {Nil},
        __obj.CODTurnInPage map { scalaxb.toXML[com.ups.ship.SCReportType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CODTurnInPage"), __scope, false) } getOrElse {Nil},
        __obj.HighValueReport map { scalaxb.toXML[com.ups.ship.HighValueReportType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("HighValueReport"), __scope, false) } getOrElse {Nil},
        __obj.LabelURL map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelURL"), __scope, false) } getOrElse {Nil},
        __obj.LocalLanguageLabelURL map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LocalLanguageLabelURL"), __scope, false) } getOrElse {Nil},
        __obj.ReceiptURL map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReceiptURL"), __scope, false) } getOrElse {Nil},
        __obj.LocalLanguageReceiptURL map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LocalLanguageReceiptURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipmentChargesTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipmentChargesType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipmentChargesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipmentChargesType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "RateChart")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TransportationCharges")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ServiceOptionsCharges")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TotalCharges")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.ShipmentChargesType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.ups.ship.ShipChargeType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipChargeType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipChargeType](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipmentChargesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.RateChart map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("RateChart"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[com.ups.ship.ShipChargeType](__obj.TransportationCharges, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TransportationCharges"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipChargeType](__obj.ServiceOptionsCharges, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ServiceOptionsCharges"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipChargeType](__obj.TotalCharges, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TotalCharges"), __scope, false))

  }

  trait DefaultShipNegotiatedRateChargesTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.NegotiatedRateChargesType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("NegotiatedRateChargesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.NegotiatedRateChargesType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TotalCharge")) ^^
      { case p1 =>
      com.ups.ship.NegotiatedRateChargesType(p1.headOption map { scalaxb.fromXML[com.ups.ship.ShipChargeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.NegotiatedRateChargesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TotalCharge map { scalaxb.toXML[com.ups.ship.ShipChargeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TotalCharge"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipShipChargeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ShipChargeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ShipChargeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ShipChargeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "CurrencyCode")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "MonetaryValue")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ShipChargeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ShipChargeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CurrencyCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("CurrencyCode"), __scope, false),
        scalaxb.toXML[String](__obj.MonetaryValue, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("MonetaryValue"), __scope, false))

  }

  trait DefaultShipFRSShipmentDataTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.FRSShipmentDataType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("FRSShipmentDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.FRSShipmentDataType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TransportationCharges")) ^^
      { case p1 =>
      com.ups.ship.FRSShipmentDataType(scalaxb.fromXML[com.ups.ship.TransportationChargeType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.FRSShipmentDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.ups.ship.TransportationChargeType](__obj.TransportationCharges, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TransportationCharges"), __scope, false))

  }

  trait DefaultShipTransportationChargeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.TransportationChargeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("TransportationChargeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.TransportationChargeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "GrossCharge")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DiscountAmount")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DiscountPercentage")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "NetCharge")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.ups.ship.TransportationChargeType(scalaxb.fromXML[com.ups.ship.ShipChargeType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipChargeType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ShipChargeType](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.TransportationChargeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ShipChargeType](__obj.GrossCharge, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("GrossCharge"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipChargeType](__obj.DiscountAmount, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DiscountAmount"), __scope, false),
        scalaxb.toXML[String](__obj.DiscountPercentage, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DiscountPercentage"), __scope, false),
        scalaxb.toXML[com.ups.ship.ShipChargeType](__obj.NetCharge, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("NetCharge"), __scope, false))

  }

  trait DefaultShipBillingWeightTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BillingWeightType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("BillingWeightType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BillingWeightType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UnitOfMeasurement")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Weight")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.BillingWeightType(scalaxb.fromXML[com.ups.ship.BillingUnitOfMeasurementType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.BillingWeightType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.BillingUnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UnitOfMeasurement"), __scope, false),
        scalaxb.toXML[String](__obj.Weight, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Weight"), __scope, false))

  }

  trait DefaultShipBillingUnitOfMeasurementTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.BillingUnitOfMeasurementType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("BillingUnitOfMeasurementType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.BillingUnitOfMeasurementType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.BillingUnitOfMeasurementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.BillingUnitOfMeasurementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipPackageResultsTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.PackageResultsType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("PackageResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.PackageResultsType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "TrackingNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ServiceOptionsCharges")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShippingLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ShippingReceipt")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "USPSPICNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.PackageResultsType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[com.ups.ship.ShipChargeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.ups.ship.LabelType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.ReceiptType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.PackageResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.TrackingNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("TrackingNumber"), __scope, false),
        __obj.ServiceOptionsCharges map { scalaxb.toXML[com.ups.ship.ShipChargeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ServiceOptionsCharges"), __scope, false) } getOrElse {Nil},
        __obj.ShippingLabel map { scalaxb.toXML[com.ups.ship.LabelType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShippingLabel"), __scope, false) } getOrElse {Nil},
        __obj.ShippingReceipt map { scalaxb.toXML[com.ups.ship.ReceiptType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ShippingReceipt"), __scope, false) } getOrElse {Nil},
        __obj.USPSPICNumber map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("USPSPICNumber"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipLabelTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LabelType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("LabelType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LabelType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImageFormat")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "GraphicImage")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "InternationalSignatureGraphicImage")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "HTMLImage")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "PDF417")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.LabelType(scalaxb.fromXML[com.ups.ship.ImageFormatType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LabelType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ImageFormatType](__obj.ImageFormat, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImageFormat"), __scope, false),
        scalaxb.toXML[String](__obj.GraphicImage, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("GraphicImage"), __scope, false),
        __obj.InternationalSignatureGraphicImage map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("InternationalSignatureGraphicImage"), __scope, false) } getOrElse {Nil},
        __obj.HTMLImage map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("HTMLImage"), __scope, false) } getOrElse {Nil},
        __obj.PDF417 map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("PDF417"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipReceiptTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ReceiptType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ReceiptType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ReceiptType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImageFormat")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "GraphicImage")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ReceiptType(scalaxb.fromXML[com.ups.ship.ImageFormatType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ReceiptType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ImageFormatType](__obj.ImageFormat, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImageFormat"), __scope, false),
        scalaxb.toXML[String](__obj.GraphicImage, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("GraphicImage"), __scope, false))

  }

  trait DefaultShipImageTypableFormat extends scalaxb.XMLFormat[com.ups.ship.ImageTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.ups.ship.ImageTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("LabelType")) => Right(scalaxb.fromXML[com.ups.ship.LabelType](node, stack))
          case (Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ReceiptType")) => Right(scalaxb.fromXML[com.ups.ship.ReceiptType](node, stack))
          case _ => Right(scalaxb.fromXML[com.ups.ship.ImageType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: com.ups.ship.ImageTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: com.ups.ship.LabelType => scalaxb.toXML[com.ups.ship.LabelType](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.ReceiptType => scalaxb.toXML[com.ups.ship.ReceiptType](x, __namespace, __elementLabel, __scope, true)
      case x: com.ups.ship.ImageType => scalaxb.toXML[com.ups.ship.ImageType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultShipImageTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ImageType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ImageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ImageType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImageFormat")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "GraphicImage")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ImageType(scalaxb.fromXML[com.ups.ship.ImageFormatType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ImageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ImageFormatType](__obj.ImageFormat, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImageFormat"), __scope, false),
        scalaxb.toXML[String](__obj.GraphicImage, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("GraphicImage"), __scope, false))

  }

  trait DefaultShipFormTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.FormType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("FormType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.FormType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Image")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FormGroupId")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "FormGroupIdName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.ups.ship.FormType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[com.ups.ship.FormImageType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.FormType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        scalaxb.toXML[String](__obj.Description, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false),
        __obj.Image map { scalaxb.toXML[com.ups.ship.FormImageType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Image"), __scope, false) } getOrElse {Nil},
        __obj.FormGroupId map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FormGroupId"), __scope, false) } getOrElse {Nil},
        __obj.FormGroupIdName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("FormGroupIdName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipFormImageTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.FormImageType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("FormImageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.FormImageType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImageFormat")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "GraphicImage")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.FormImageType(p1.headOption map { scalaxb.fromXML[com.ups.ship.ImageFormatType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.FormImageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ImageFormat map { scalaxb.toXML[com.ups.ship.ImageFormatType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImageFormat"), __scope, false) } getOrElse {Nil},
        __obj.GraphicImage map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("GraphicImage"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipImageFormatTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ImageFormatType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ImageFormatType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ImageFormatType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ImageFormatType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ImageFormatType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipSCReportTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.SCReportType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("SCReportType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.SCReportType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Image")) ^^
      { case p1 =>
      com.ups.ship.SCReportType(scalaxb.fromXML[com.ups.ship.ImageTypable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.SCReportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.ups.ship.ImageTypable](__obj.Image, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Image"), __scope, false))

  }

  trait DefaultShipHighValueReportTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.HighValueReportType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("HighValueReportType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.HighValueReportType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Image")) ^^
      { case p1 =>
      com.ups.ship.HighValueReportType(scalaxb.fromXML[com.ups.ship.ImageTypable](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.HighValueReportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.ups.ship.ImageTypable](__obj.Image, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Image"), __scope, false))

  }

  trait DefaultShipDryIceTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.DryIceType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("DryIceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.DryIceType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "RegulationSet")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "DryIceWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "MedicalUseIndicator")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.DryIceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.DryIceWeightType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.DryIceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.RegulationSet, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("RegulationSet"), __scope, false),
        scalaxb.toXML[com.ups.ship.DryIceWeightType](__obj.DryIceWeight, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("DryIceWeight"), __scope, false),
        __obj.MedicalUseIndicator map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("MedicalUseIndicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipDryIceWeightTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.DryIceWeightType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("DryIceWeightType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.DryIceWeightType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "UnitOfMeasurement")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Weight")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.DryIceWeightType(scalaxb.fromXML[com.ups.ship.ShipUnitOfMeasurementType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.DryIceWeightType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.ShipUnitOfMeasurementType](__obj.UnitOfMeasurement, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("UnitOfMeasurement"), __scope, false),
        scalaxb.toXML[String](__obj.Weight, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Weight"), __scope, false))

  }

  trait DefaultShipReceiptSpecificationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ReceiptSpecificationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ReceiptSpecificationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ReceiptSpecificationType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "ImageFormat")) ^^
      { case p1 =>
      com.ups.ship.ReceiptSpecificationType(scalaxb.fromXML[com.ups.ship.ReceiptImageFormatType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ReceiptSpecificationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.ups.ship.ReceiptImageFormatType](__obj.ImageFormat, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("ImageFormat"), __scope, false))

  }

  trait DefaultShipReceiptImageFormatTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ReceiptImageFormatType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0")
    
    override def typeName: Option[String] = Some("ReceiptImageFormatType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ReceiptImageFormatType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.ReceiptImageFormatType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ReceiptImageFormatType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipErrorsFormat extends scalaxb.ElemNameParser[com.ups.ship.Errors] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.Errors] =
      phrase(rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "ErrorDetail")) ^^
      { case p1 =>
      com.ups.ship.Errors(p1.toSeq map { scalaxb.fromXML[com.ups.ship.ErrorDetailType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: com.ups.ship.Errors, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ErrorDetail flatMap { scalaxb.toXML[com.ups.ship.ErrorDetailType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("ErrorDetail"), __scope, false) })

  }

  trait DefaultShipErrorDetailTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.ErrorDetailType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1")
    
    override def typeName: Option[String] = Some("ErrorDetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ErrorDetailType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Severity")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "PrimaryErrorCode")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "MinimumRetrySeconds")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Location")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "SubErrorCode")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "AdditionalInformation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      com.ups.ship.ErrorDetailType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.CodeType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.ups.ship.LocationType](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[com.ups.ship.CodeType](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[com.ups.ship.AdditionalInfoType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.ErrorDetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Severity, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Severity"), __scope, false),
        scalaxb.toXML[com.ups.ship.CodeType](__obj.PrimaryErrorCode, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("PrimaryErrorCode"), __scope, false),
        __obj.MinimumRetrySeconds map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("MinimumRetrySeconds"), __scope, false) } getOrElse {Nil},
        __obj.Location map { scalaxb.toXML[com.ups.ship.LocationType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Location"), __scope, false) } getOrElse {Nil},
        __obj.SubErrorCode flatMap { scalaxb.toXML[com.ups.ship.CodeType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("SubErrorCode"), __scope, false) },
        __obj.AdditionalInformation flatMap { scalaxb.toXML[com.ups.ship.AdditionalInfoType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("AdditionalInformation"), __scope, false) })

  }

  trait DefaultShipCodeTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.CodeType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1")
    
    override def typeName: Option[String] = Some("CodeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.CodeType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Code")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Description")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Digest")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.CodeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.CodeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Code"), __scope, false),
        scalaxb.toXML[String](__obj.Description, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Description"), __scope, false),
        __obj.Digest map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Digest"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipAdditionalInfoTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.AdditionalInfoType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1")
    
    override def typeName: Option[String] = Some("AdditionalInfoType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.AdditionalInfoType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Type")) ~ 
      rep(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Value")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.AdditionalInfoType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[com.ups.ship.AdditionalCodeDescType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.AdditionalInfoType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Type, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Type"), __scope, false),
        __obj.Value flatMap { scalaxb.toXML[com.ups.ship.AdditionalCodeDescType](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Value"), __scope, false) })

  }

  trait DefaultShipAdditionalCodeDescTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.AdditionalCodeDescType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1")
    
    override def typeName: Option[String] = Some("AdditionalCodeDescType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.AdditionalCodeDescType] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "Description")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.AdditionalCodeDescType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.AdditionalCodeDescType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Code, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Code"), __scope, false),
        __obj.Description map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("Description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipLocationTypeFormat extends scalaxb.ElemNameParser[com.ups.ship.LocationType] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1")
    
    override def typeName: Option[String] = Some("LocationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.LocationType] =
      phrase(opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "LocationElementName")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "XPathOfElement")) ~ 
      opt(scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), "OriginalValue")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.ups.ship.LocationType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.ups.ship.LocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.LocationElementName map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("LocationElementName"), __scope, false) } getOrElse {Nil},
        __obj.XPathOfElement map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("XPathOfElement"), __scope, false) } getOrElse {Nil},
        __obj.OriginalValue map { scalaxb.toXML[String](_, Some("http://www.ups.com/XMLSchema/XOLTWS/Error/v1.1"), Some("OriginalValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultShipUsernameTokenFormat extends scalaxb.ElemNameParser[com.ups.ship.UsernameToken] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.UsernameToken] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "Username")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "Password")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.UsernameToken(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.UsernameToken, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Username, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), Some("Username"), __scope, false),
        scalaxb.toXML[String](__obj.Password, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), Some("Password"), __scope, false))

  }

  trait DefaultShipServiceAccessTokenFormat extends scalaxb.ElemNameParser[com.ups.ship.ServiceAccessToken] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.ServiceAccessToken] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "AccessLicenseNumber")) ^^
      { case p1 =>
      com.ups.ship.ServiceAccessToken(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.ServiceAccessToken, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.AccessLicenseNumber, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), Some("AccessLicenseNumber"), __scope, false))

  }

  trait DefaultShipUPSSecurityFormat extends scalaxb.ElemNameParser[com.ups.ship.UPSSecurity] {
    val targetNamespace: Option[String] = Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.ups.ship.UPSSecurity] =
      phrase((scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "UsernameToken")) ~ 
      (scalaxb.ElemName(Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), "ServiceAccessToken")) ^^
      { case p1 ~ p2 =>
      com.ups.ship.UPSSecurity(scalaxb.fromXML[com.ups.ship.UsernameToken](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.ups.ship.ServiceAccessToken](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.ups.ship.UPSSecurity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.ups.ship.UsernameToken](__obj.UsernameToken, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), Some("UsernameToken"), __scope, false),
        scalaxb.toXML[com.ups.ship.ServiceAccessToken](__obj.ServiceAccessToken, Some("http://www.ups.com/XMLSchema/XOLTWS/UPSS/v1.0"), Some("ServiceAccessToken"), __scope, false))

  }


}

